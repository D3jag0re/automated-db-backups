name: MongoDB Backup to DigitalOcean Spaces

on:
  workflow_dispatch: # Manual trigger
  # schedule:
  #   - cron: '0 */12 * * *' # Uncomment for every 12 hours

jobs:
  backup:
    runs-on: ubuntu-latest

    env:
      VM_HOST: ${{ secrets.VM_HOST }} # Hostname or IP stored as a GitHub secret
      DATE: $(date +'%m-%d-%y')
      BACKUP_PATH: /mongo-data/backups/mongo-backup-$(date +'%m-%d-%y').tar.gz
      BACKUP_FILE: mongo-backup-$(date +'%m-%d-%y').tar.gz
      SPACES_URL: ${{ secrets.SPACES_URL }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: rsync Scripts
        uses: burnett01/rsync-deployments@7.0.1
        with:
          switches: -avzr --delete
          path: ./
          remote_path: /tmp/
          remote_host: ${{ secrets.VM_HOST }} 
          remote_user: root
          remote_key: ${{ secrets.DO_SSH_PRIVATE_KEY }} 

      - name: Copy Script and run backup 
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VM_HOST }} 
          username: root
          key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
          script: |
              echo "running script.........................................."  
              chmod +x /tmp/backupDB.sh
              bash /tmp/backupDB.sh
              echo "Script Ran Successfully................................."

      - name: Copy backup from VM to GitHub runner
        run: |
          # Save the private key locally
          echo "$SSH_PRIVATE_KEY" > private_key
          chmod 600 private_key

          # Dynamic date variable
          DATE=$(date +'%m-%d-%y')
          BACKUP_PATH="/mongo-data/backups/mongo-backup-$DATE.tar.gz"
          BACKUP_FILE="./mongo-backup-$DATE.tar.gz"

          # Copy Backup from VM
          scp -o StrictHostKeyChecking=no -i private_key root@${{ secrets.VM_HOST }}:$BACKUP_PATH ./$BACKUP_FILE
          echo "copied to runner Successfully..........................."

          # Cleanup private key
          rm -f private_key 
      
      - name: Install AWS CLI
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2
          verbose: false
          arch: amd64
      
      - name: Upload backup to DigitalOcean Spaces
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.DO_SPACES_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DO_SPACES_SECRET_KEY }}
        run: |
            aws s3 cp ./$BACKUP_FILE s3://$SPACES_BUCKET/ --endpoint-url ${{ secrets.SPACES_URL }}
      
      - name: Cleanup local backup
        run: rm -f ./$BACKUP_FILE
      
      - name: Job Completed
        run: echo "Backup workflow completed successfully."